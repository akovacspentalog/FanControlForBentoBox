from machine import Pin, I2C, SoftI2C, ADC
from ssd1306 import SSD1306_I2C
import ssd1306
import time
import framebuf
import freesans20
import writer

#GPIO Pin Number Definitions; use whatever pin numbers you want
button_pin = 7 #Pin for button
led_pin = 25 #On-board LED = GPIO25; change if using external LED
voc_sense_pin = 26 #ADC GPIO pin number for VOC sensor
voc_threshold = 1.1 #Threshold to activate system
fan_pin = 22 #GPIO pin of fan relay signal

#set up button (optional)
#button = Pin(button_pin,Pin.IN, Pin.PULL_DOWN)

#LED Setup
led = Pin(led_pin, Pin.OUT)

#set up OLED
i2c=I2C(0,sda=Pin(0), scl=Pin(1), freq=400000)
oled_width = 128
oled_height = 64
oled = SSD1306_I2C(oled_width, oled_height, i2c)

#set up VOC sensor
voc_def = ADC(voc_sense_pin)
voc_conv = 5/65535

#set up fan trigger pin
fan_relay = Pin(fan_pin, mode=Pin.OUT)

count = 0
voc_level_avg = 0
voc_level_sum = 0

bigText = writer.Writer(oled, freesans20)

#bootup splash screen
splash = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x1f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\x00?\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x01\x80\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\x03\xc0\x07\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80\x0f\xf0\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x00?\xfc\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x00\xff\xff\x00\x1f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x03\xff\xff\xc0\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\x07\xff\xff\xe0\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80?\xff\xff\xfc\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x7f\xff\xff\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x7f\xff\xff\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00?\xff\xff\xfc\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x0f\xff\xff\xf0\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x01\xff\xff\x80\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00?\xfc\x00@\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\x80\x1f\xf8\x01\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xe0\x03\xc0\x07\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xf8\x00\x00\x1f\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xfc\x00\x00?\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\x00\x00\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xc0\x03\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf0\x0f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\xff\xf8\x1f\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\xff\xf8\x1f\xff\x80\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x7f\xf8\x1f\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80?\xf8\x1f\xfc\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\x07\xf8\x1f\xe0\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x03\xf8\x1f\xc0\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x00\xf8\x1f\x00\x1f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x008\x1c\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80\x08\x10\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\x00\x00\x07\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x00\x00\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\x00?\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x1f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
frame = framebuf.FrameBuffer(splash,128,64, framebuf.MONO_HLSB)
oled.invert(1)
oled.fill(0)
oled.blit(frame,0,0)
oled.show()
time.sleep(5)
oled.fill(0)
oled.show()
oled.invert(0)

# Main Loop
while True:
###################### VOC SENSING ########################  
    if count <= 49:
        count += 1
        voc_level_new = voc_def.read_u16() * voc_conv
        voc_level_sum += voc_level_new
        voc_level_avg = voc_level_sum/count
        bigText = writer.Writer(oled, freesans20)
        bigText.set_textpos(0,0)
        if voc_level_avg > 1:
            bigText.printstring("VOC: {}  T^T".format(round(voc_level_avg,1)))
            oled.show()
        else:
            bigText.printstring("VOC: {}  ^_^".format(round(voc_level_avg,1)))
            oled.show()
###################### TEMPERATURE ########################
        temp = ADC(4)
        adc_voltage = temp.read_u16() * 3.3 / 65535
        cpu_temp = 27 - (adc_voltage - 0.706)/0.001721
        bigText.set_textpos(0,21)
        bigText.printstring("TEMP: {}C".format(round(cpu_temp,1)))
        oled.show()
        time.sleep(1)
    else:
        count = 1  #reset counter
        voc_level_sum = voc_level_avg #reset running sum of VOC readings
        oled.fill(0) #clear screen of any artifacts
        oled.show()

##################### RELAY CONTROL ######################
    if voc_level_avg >= voc_threshold:
        fan_relay.on() #relay pin high
        bigText.set_textpos(0,42)
        bigText.printstring("FAN: ON")
        led.value(1)
    else:
        fan_relay.off() #relay pin low
        bigText.set_textpos(0,42) 
        bigText.printstring("FAN: OFF")
        led.value(0)
        